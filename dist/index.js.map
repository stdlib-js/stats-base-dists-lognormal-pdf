{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.157\n*\n* @example\n* var y = pdf( 1.0, 0.0, 1.0 );\n* // returns ~0.399\n*\n* @example\n* var y = pdf( 1.0, 3.0, 1.0 );\n* // returns ~0.004\n*\n* @example\n* var y = pdf( -1.0, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = pdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction pdf( x, mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( 2.0 * s2 * PI ) );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pdf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PI = require( '@stdlib/constants-float64-pi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 4.0, 2.0 );\n* var y = pdf( 10.0 );\n* // returns ~0.014\n*\n* y = pdf( 2.0 );\n* // returns ~0.025\n*/\nfunction factory( mu, sigma ) {\n\tvar s2;\n\tvar A;\n\tvar B;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\tA = 1.0 / ( sqrt( 2.0 * s2 * PI ) );\n\tB = -1.0 / ( 2.0 * s2 );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 2.5 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn (1.0/x) * A * exp( B * pow( ln(x) - mu, 2.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a lognormal distribution.\n*\n* @module @stdlib/stats-base-dists-lognormal-pdf\n*\n* @example\n* var pdf = require( '@stdlib/stats-base-dists-lognormal-pdf' );\n*\n* var y = pdf( 2.0, 0.0, 1.0 );\n* // returns ~0.157\n*\n* y = pdf( 1.0, 0.0, 1.0 );\n* // returns ~0.399\n*\n* y = pdf( 1.0, 3.0, 1.0 );\n* // returns ~0.004\n*\n* var mypdf = pdf.factory( 4.0, 2.0 );\n* y = mypdf( 10.0 );\n* // returns ~0.014\n*\n* y = mypdf( 2.0 );\n* // returns ~0.025\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAK,QAAS,8BAA+B,EA8CjD,SAASC,EAAKC,EAAGC,EAAIC,EAAQ,CAC5B,IAAIC,EACAC,EACAC,EACJ,OACCZ,EAAOO,CAAE,GACTP,EAAOQ,CAAG,GACVR,EAAOS,CAAM,GACbA,GAAS,EAEF,IAEHF,GAAK,EACF,GAERG,EAAKP,EAAKM,EAAO,CAAI,EACrBE,EAAI,EAAQV,EAAM,EAAMS,EAAKL,CAAG,EAChCO,EAAI,IAAS,EAAMF,GACX,EAAIH,EAAKI,EAAIT,EAAKU,EAAIT,EAAKC,EAAGG,CAAC,EAAIC,EAAI,CAAI,CAAE,EACtD,CAKAT,EAAO,QAAUO,ICjGjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,EAAK,QAAS,8BAA+B,EAC7CC,EAAK,QAAS,8BAA+B,EAoBjD,SAASC,EAASC,EAAIC,EAAQ,CAC7B,IAAIC,EACAC,EACAC,EACJ,GACCX,EAAOO,CAAG,GACVP,EAAOQ,CAAM,GACbA,GAAS,EAET,OAAOT,EAAkB,GAAI,EAE9B,OAAAU,EAAKN,EAAKK,EAAO,CAAI,EACrBE,EAAI,EAAQT,EAAM,EAAMQ,EAAKJ,CAAG,EAChCM,EAAI,IAAS,EAAMF,GACZG,EAaP,SAASA,EAAKC,EAAI,CACjB,OAAKb,EAAOa,CAAE,EACN,IAEHA,GAAK,EACF,EAEA,EAAIA,EAAKH,EAAIR,EAAKS,EAAIR,EAAKC,EAAGS,CAAC,EAAIN,EAAI,CAAI,CAAE,CACtD,CACD,CAKAT,EAAO,QAAUQ,IC1CjB,IAAIQ,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "sqrt", "exp", "pow", "ln", "PI", "pdf", "x", "mu", "sigma", "s2", "A", "B", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "sqrt", "exp", "pow", "ln", "PI", "factory", "mu", "sigma", "s2", "A", "B", "pdf", "x", "setReadOnly", "main", "factory"]
}
